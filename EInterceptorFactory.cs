using System;
using System.Collections.Generic;

namespace EasyAOP
{
    public class EInterceptorFactory
    {
        static Dictionary<Type, IEInterceptor> cache = new Dictionary<Type, IEInterceptor>();

        #region functionalities

        /// <summary>
        /// create object with interceptor
        /// </summary>
        /// <typeparam name="T">the retrun type</typeparam>
        /// <param name="typeTarget">target type that will be intecepted</param>
        /// <returns></returns>
        public static T Create<T>(Type typeTarget = null)
        {
            if (typeTarget == null)
            {
                typeTarget = typeof(T);
            }

            AddToCache(typeTarget);

            if (typeof(T).IsInterface)
            {
                return (T)cache[typeTarget].CreateProxy();
            }
            else
            {
                return (T)cache[typeTarget].Create();
            }
        }

        /// <summary>
        /// create object with interceptor
        /// </summary>
        /// <typeparam name="T">target type that will be intecepted</typeparam>
        /// <typeparam name="R">the retrun type</typeparam>
        /// <returns></returns>
        public static R Create<T, R>()
        {
            return Create<R>(typeof(T));
        }

        /// <summary>
        /// get the soure code that is generated by interceptor automatically
        /// remark: this method is very useful while errors occur
        /// </summary>
        /// <param name="typeTarget">target type that will be intecepted</param>
        /// <returns></returns>
        public static string GetSourceCode(Type typeTarget)
        {
            AddToCache(typeTarget);

            return cache[typeTarget].GetSourceCode();
        }

        /// <summary>
        /// get the soure code that is generated by interceptor automatically
        /// remark: this method is very useful while errors occur
        /// </summary>
        /// <typeparam name="T">target type that will be intecepted</typeparam>
        /// <returns></returns>
        public static string GetSourceCode<T>()
        {
            return GetSourceCode(typeof(T));
        }

        /// <summary>
        /// append additional references to target type
        /// </summary>
        /// <param name="typeTarget">target type that will be intecepted</param>
        /// <param name="typeAdditionalReferences">additional references</param>
        public static void AddAdditionalReferences(Type typeTarget, params Type[] typeAdditionalReferences)
        {
            AddToCache(typeTarget);
            cache[typeTarget].AddAdditionalReferences(typeAdditionalReferences);
        }

        /// <summary>
        /// append additional references to target type
        /// </summary>
        /// <typeparam name="T">target type that will be intecepted</typeparam>
        /// <param name="typeAdditionalReferences">additional references</param>
        public static void AddAdditionalReferences<T>(params Type[] typeAdditionalReferences)
        {
            AddAdditionalReferences(typeof(T), typeAdditionalReferences);
        }

        /// <summary>
        /// remove additional references of target type
        /// </summary>
        /// <param name="typeTarget">target type that will be intecepted</param>
        /// <param name="typeAdditionalReferences">additional references</param>
        public static void RemoveAdditionalReferences(Type typeTarget, params Type[] typeAdditionalReferences)
        {
            AddToCache(typeTarget);
            cache[typeTarget].RemoveAdditionalReferences(typeAdditionalReferences);
        }

        /// <summary>
        /// remove additional references of target type
        /// </summary>
        /// <typeparam name="T">target type that will be intecepted</typeparam>
        /// <param name="typeAdditionalReferences">additional references</param>
        public static void RemoveAdditionalReferences<T>(params Type[] typeAdditionalReferences)
        {
            RemoveAdditionalReferences(typeof(T), typeAdditionalReferences);
        }

        #endregion

        #region auxiliary

        private static void AddToCache(Type typeTarget)
        {
            if (!cache.ContainsKey(typeTarget))
            {
                cache.Add(typeTarget, new EInterceptor(typeTarget));
            }
        }

        #endregion
    }
}
